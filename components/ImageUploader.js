import { useState, useRef } from "react";
import { 
  FiUpload, 
  FiImage, 
  FiLoader, 
  FiCheckCircle, 
  FiAlertCircle, 
  FiDownload, 
  FiPrinter, 
  FiInfo, 
  FiDroplet, 
  FiSun, 
  FiShield 
} from "react-icons/fi";
import { toPng } from 'html-to-image';

export default function ImageUploader() {
  const [selectedFile, setSelectedFile] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null); 
  const [prediction, setPrediction] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const resultsRef = useRef(null);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      if (!file.type.match('image.*')) {
        setError('Please select an image file (JPEG, PNG)');
        return;
      }
      setError(null);
      setSelectedFile(file);
      setPreviewUrl(URL.createObjectURL(file));
      setPrediction(null);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      setError('Please select an image first');
      return;
    }

    const formData = new FormData();
    formData.append("file", selectedFile);

    setLoading(true);
    setError(null);
    try {
      const response = await fetch("http://127.0.0.1:5000/predict", {
        method: "POST",
        body: formData,
      });
      if (!response.ok) throw new Error('Server error');
      const data = await response.json();
      setPrediction(data);
    } catch (error) {
      console.error("Error uploading image:", error);
      setError(error.message || 'Failed to analyze image');
    } finally {
      setLoading(false);
    }
  };

  const handleDownloadResults = async () => {
    if (!resultsRef.current) return;
    
    try {
      const dataUrl = await toPng(resultsRef.current);
      const link = document.createElement('a');
      link.download = `plant-diagnosis-${new Date().toISOString().slice(0,10)}.png`;
      link.href = dataUrl;
      link.click();
    } catch (error) {
      console.error('Error generating download:', error);
      setError('Failed to generate download');
    }
  };

  const handlePrintResults = () => {
    if (!resultsRef.current) return;
    
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>Plant Diagnosis Report</title>
          <style>
            body { font-family: sans-serif; padding: 20px; }
            .report-header { text-align: center; margin-bottom: 30px; }
            .report-section { margin-bottom: 25px; padding: 15px; border-radius: 10px; }
            .diagnosis { background: #f0fdf4; border: 1px solid #bbf7d0; }
            .details { background: #f0f9ff; border: 1px solid #bae6fd; }
            .treatment { background: #f5f3ff; border: 1px solid #ddd6fe; }
            h1, h2, h3 { color: #1e293b; }
            .image-container { text-align: center; margin: 20px 0; }
            .image-container img { max-width: 100%; max-height: 300px; border-radius: 8px; }
            .metadata { display: flex; justify-content: space-between; margin-top: 30px; font-size: 12px; color: #64748b; }
          </style>
        </head>
        <body>
          <div class="report-header">
            <h1>Plant Health Diagnosis Report</h1>
            <p>Generated on ${new Date().toLocaleDateString()}</p>
          </div>
          
          <div class="image-container">
            <img src="${previewUrl}" alt="Plant Diagnosis" />
          </div>
          
          <div class="report-section diagnosis">
            <h2>Diagnosis Summary</h2>
            <p><strong>Condition:</strong> ${prediction.class}</p>
            <p><strong>Confidence:</strong> ${prediction.confidence ? `${prediction.confidence.toFixed(1)}%` : "N/A"}</p>
          </div>
          
          <div class="report-section details">
            <h2>Details</h2>
            <p><strong>Possible Causes:</strong> ${prediction.cause || "No specific causes identified"}</p>
            <p><strong>Symptoms:</strong> ${prediction.problem || "No detailed symptoms available"}</p>
          </div>
          
          <div class="report-section treatment">
            <h2>Recommended Treatment</h2>
            ${prediction.solution ? 
              `<ul>${prediction.solution.split('\n').map(item => `<li>${item}</li>`).join('')}</ul>` : 
              '<p>No specific treatment recommendations available</p>'}
          </div>
          
          <div class="metadata">
            <p>Generated by Plant Disease Analyzer</p>
            <p>${window.location.hostname}</p>
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    setTimeout(() => {
      printWindow.print();
    }, 500);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold text-center text-gray-900 mb-12">Plant Disease Analyzer</h1>
        
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Left Section - Fixed Height Upload Area */}
          <div className="w-full lg:w-1/3">
            <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-100 transition-all hover:shadow-xl h-[600px] sticky top-8">
              <div className="text-center mb-6">
                <h2 className="text-xl font-bold text-gray-800 mb-2">Upload Image</h2>
                <p className="text-sm text-gray-500">Upload a clear photo of your plant leaves</p>
              </div>
              
              <label className="cursor-pointer group">
                <div className={`w-full h-64 border-2 border-dashed rounded-xl flex flex-col items-center justify-center transition-all 
                  ${previewUrl ? 'border-green-200 bg-green-50' : 'border-gray-300 hover:border-blue-400 bg-gray-50'} 
                  ${error ? 'border-red-200 bg-red-50' : ''}`}>
                  {previewUrl ? (
                    <div className="relative w-full h-full overflow-hidden rounded-lg">
                      <img
                        src={previewUrl}
                        alt="Selected Preview"
                        className="w-full h-full object-contain transition-transform group-hover:scale-105"
                      />
                      <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all"></div>
                    </div>
                  ) : (
                    <div className="text-center p-4">
                      <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 text-blue-500 mb-3">
                        <FiUpload className="h-6 w-6" />
                      </div>
                      <p className="text-xs text-gray-500 mb-1">
                        <span className="font-medium text-blue-500">Click to upload</span> or drag and drop
                      </p>
                      <p className="text-xs text-gray-400">JPEG or PNG (max. 5MB)</p>
                    </div>
                  )}
                </div>
                <input
                  type="file"
                  accept="image/jpeg, image/png"
                  onChange={handleFileChange}
                  className="hidden"
                  disabled={loading}
                />
              </label>
              
              {error && (
                <div className="mt-3 flex items-center text-red-500 text-xs">
                  <FiAlertCircle className="mr-1" />
                  {error}
                </div>
              )}
              
              <button
                onClick={handleUpload}
                disabled={loading || !selectedFile}
                className={`mt-6 w-full py-2 px-4 rounded-lg font-medium text-white transition-all flex items-center justify-center
                  ${loading || !selectedFile ? 'bg-gray-300 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600 shadow-md hover:shadow-lg'}
                  ${loading ? 'animate-pulse' : ''}`}
              >
                {loading ? (
                  <>
                    <FiLoader className="animate-spin mr-2" />
                    Analyzing...
                  </>
                ) : (
                  <>
                    <FiImage className="mr-2" />
                    Analyze
                  </>
                )}
              </button>
            </div>
          </div>

          {/* Right Section - Expanding Results Area */}
          <div className="w-full lg:w-2/3 bg-white p-8 rounded-xl shadow-lg border border-gray-100" ref={resultsRef}>
            <div className="flex justify-between items-center mb-8">
              <div>
                <h2 className="text-2xl font-bold text-gray-800">Plant Health Analysis</h2>
                <p className="text-gray-500">Comprehensive diagnosis and care recommendations</p>
              </div>
              {prediction && (
                <div className="flex gap-2">
                  <button
                    onClick={handleDownloadResults}
                    className="p-2 text-gray-500 hover:text-blue-500 hover:bg-blue-50 rounded-lg transition-colors"
                    title="Download Report"
                  >
                    <FiDownload className="h-5 w-5" />
                  </button>
                  <button
                    onClick={handlePrintResults}
                    className="p-2 text-gray-500 hover:text-blue-500 hover:bg-blue-50 rounded-lg transition-colors"
                    title="Print Report"
                  >
                    <FiPrinter className="h-5 w-5" />
                  </button>
                </div>
              )}
            </div>
            
            {prediction ? (
              <div className="space-y-8 animate-fadeIn">
                {/* Preview Image with elegant frame */}
                {previewUrl && (
                  <div className="relative group">
                    <div className="absolute inset-0 bg-gradient-to-br from-green-100 to-blue-100 rounded-xl transform rotate-1 scale-95 group-hover:rotate-2 transition-transform"></div>
                    <img
                      src={previewUrl}
                      alt="Analysis Preview"
                      className="relative z-10 w-full h-64 object-contain rounded-lg border-4 border-white shadow-md"
                    />
                  </div>
                )}
                
                {/* Diagnosis Card with improved layout */}
                <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-6 border border-green-200 shadow-sm">
                  <div className="flex items-start">
                    <div className="bg-green-100 p-3 rounded-lg mr-4">
                      <FiCheckCircle className="h-6 w-6 text-green-600" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-bold text-xl text-green-800 mb-3">Diagnosis Summary</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-white p-4 rounded-lg border border-green-50">
                          <p className="text-sm font-medium text-green-600 mb-1">Condition Identified</p>
                          <p className="text-lg font-bold text-gray-800 capitalize">{prediction.class}</p>
                        </div>
                        <div className="bg-white p-4 rounded-lg border border-green-50">
                          <p className="text-sm font-medium text-green-600 mb-1">Confidence Level</p>
                          <p className="text-lg font-bold text-gray-800">
                            {prediction.confidence ? `${prediction.confidence.toFixed(1)}%` : "N/A"}
                            {prediction.confidence > 80 && (
                              <span className="ml-2 text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full">High Confidence</span>
                            )}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Detailed Analysis Section */}
                <div className="space-y-6">
                  <div className="bg-blue-50 rounded-xl p-6 border border-blue-200">
                    <div className="flex items-start mb-4">
                      <div className="bg-blue-100 p-3 rounded-lg mr-4">
                        <FiInfo className="h-6 w-6 text-blue-600" />
                      </div>
                      <div>
                        <h3 className="font-bold text-xl text-blue-800">Detailed Analysis</h3>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="bg-white p-4 rounded-lg border border-blue-50">
                        <h4 className="font-semibold text-blue-700 mb-2 flex items-center">
                          <FiDroplet className="mr-2" /> Possible Causes
                        </h4>
                        <div className="prose prose-sm text-gray-700">
                          {prediction.cause ? (
                            <ul className="list-disc pl-5 space-y-1">
                              {prediction.cause.split('\n').map((item, i) => (
                                <li key={i}>{item}</li>
                              ))}
                            </ul>
                          ) : (
                            <p className="text-gray-500">No specific causes identified</p>
                          )}
                        </div>
                      </div>
                      
                      <div className="bg-white p-4 rounded-lg border border-blue-50">
                        <h4 className="font-semibold text-blue-700 mb-2 flex items-center">
                          <FiSun className="mr-2" /> Symptoms
                        </h4>
                        <div className="prose prose-sm text-gray-700">
                          {prediction.problem ? (
                            <ul className="list-disc pl-5 space-y-1">
                              {prediction.problem.split('\n').map((item, i) => (
                                <li key={i}>{item}</li>
                              ))}
                            </ul>
                          ) : (
                            <p className="text-gray-500">No detailed symptoms available</p>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Treatment Plan with steps */}
                  <div className="bg-purple-50 rounded-xl p-6 border border-purple-200">
                    <div className="flex items-start mb-4">
                      <div className="bg-purple-100 p-3 rounded-lg mr-4">
                        <FiShield className="h-6 w-6 text-purple-600" />
                      </div>
                      <div>
                        <h3 className="font-bold text-xl text-purple-800">Treatment Plan</h3>
                        <p className="text-sm text-purple-600">Recommended steps to restore plant health</p>
                      </div>
                    </div>
                    
                    <div className="bg-white rounded-lg border border-purple-100 overflow-hidden">
                      {prediction.solution ? (
                        <ol className="divide-y divide-purple-50">
                          {prediction.solution.split('\n').map((item, i) => (
                            <li key={i} className="p-4 hover:bg-purple-50 transition-colors">
                              <div className="flex items-start">
                                <span className="flex items-center justify-center h-6 w-6 bg-purple-100 text-purple-800 rounded-full mr-3 mt-0.5 flex-shrink-0">
                                  {i + 1}
                                </span>
                                <p className="text-gray-800">{item}</p>
                              </div>
                            </li>
                          ))}
                        </ol>
                      ) : (
                        <div className="p-4 text-center text-gray-500">
                          No specific treatment recommendations available
                        </div>
                      )}
                    </div>
                  </div>
                  
                  {/* Prevention Tips */}
                  <div className="bg-amber-50 rounded-xl p-6 border border-amber-200">
                    <h3 className="font-bold text-xl text-amber-800 mb-3">Prevention Tips</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      <div className="bg-white p-4 rounded-lg border border-amber-100">
                        <h4 className="font-medium text-amber-700 mb-2">Watering</h4>
                        <p className="text-sm text-gray-600">Maintain consistent moisture levels without overwatering</p>
                      </div>
                      <div className="bg-white p-4 rounded-lg border border-amber-100">
                        <h4 className="font-medium text-amber-700 mb-2">Sunlight</h4>
                        <p className="text-sm text-gray-600">Ensure proper light exposure for your plant species</p>
                      </div>
                      <div className="bg-white p-4 rounded-lg border border-amber-100">
                        <h4 className="font-medium text-amber-700 mb-2">Inspection</h4>
                        <p className="text-sm text-gray-600">Regularly check leaves for early signs of disease</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <div className={`flex flex-col items-center justify-center h-64 text-gray-400 rounded-xl border-2 border-dashed border-gray-200 
                ${loading ? 'animate-pulse' : ''}`}>
                {loading ? (
                  <>
                    <FiLoader className="animate-spin h-8 w-8 mb-3" />
                    <p>Analyzing your image...</p>
                    <p className="text-xs mt-2">This may take a few moments</p>
                  </>
                ) : (
                  <>
                    <FiImage className="h-8 w-8 mb-3" />
                    <p>Upload an image to see analysis results</p>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}